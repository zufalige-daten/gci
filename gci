#!/usr/bin/python3

import sys
import subprocess
import os
import argparse

whoami_result = subprocess.check_output("whoami", shell=True)
if whoami_result != b'root\n':
	print("GCI: ERROR: Must be root to excecute command.")
	exit(-1)

ifile = open("/etc/gci.lst", "r+")

parser = argparse.ArgumentParser(prog="GCI", description="Clones a git repository, configures, builds, and installs it.", epilog="Type -h for a list of commands and arguments.")

parser.add_argument("-i", "--install")
parser.add_argument("-r", "--remove")
parser.add_argument("-v", "--version")
parser.add_argument("-u", "--upgrade", action="store_true")

args = parser.parse_args()

def install(repo_url, github_repo_basic, github_repo, usever):
	global ifile
	latest_ver = subprocess.check_output("git ls-remote --tags " + repo_url + " | grep -v 'rc' | grep -v '\^{}' | grep -v 'pre' | tail --lines 1 | cut --delimiter='/' --fields=3", shell=True).decode("utf-8")[:-1]
	if latest_ver == "":
		print("GCI: error: repository " + github_repo + " does not have any released versions/tags that are labeled for release.")
	if usever == latest_ver:
		print("GCI: same version already installed.")
		ifile.close()
		return
	if usever == "":
		usever = latest_ver
	for line in ifile.readlines():
		if line == github_repo + " " + usever + "\n":
			print("GCI: same version already installed.")
			ifile.close()
			return
	old_cwd = os.getcwd()
	make_dir = "/tmp/gci-" + github_repo.replace("/", "___SLASH___")
	if os.path.abspath(make_dir) == "/" or os.path.abspath(make_dir) == "/*" or not os.path.abspath(make_dir).startswith("/tmp/gci-"):
		print("GCI: error: github repository " + github_repo + " does not exist.")
		return
	os.mkdir(make_dir)
	os.chdir(make_dir)
	status = os.system("git clone " + repo_url)
	if status != 0:
		os.chdir(old_cwd)
		os.system("rm -rf " + make_dir)
		print("GCI: error: github repository " + github_repo + " does not exist.")
		return
	repo_dir = make_dir + github_repo[github_repo.find("/"):]
	os.chdir(repo_dir)
	if usever != "":
		status = os.system("git checkout " + usever)
		if status != 0:
			os.chdir(old_cwd)
			os.system("rm -rf " + make_dir)
			print("GCI: error: version (tag) " + usever + " does not exist in github repo.")
			return
	status = os.system("./configure")
	if status != 0:
		status = os.system("make menuconfig")
		if status != 0:
			os.system("make config")
	status = os.system("make -j " + str(os.cpu_count()))
	if status != 0:
		os.chdir(old_cwd)
		os.system("rm -rf " + make_dir)
		print("GCI: error: build failed with exit status " + str(status) + ", see above.")
		return
	os.system("make modules_install")
	status = os.system("make install")
	if status != 0:
		os.chdir(old_cwd)
		os.system("rm -rf " + make_dir)
		print("GCI: error: cannot excecute 'make install', see above.")
		return
	os.chdir(old_cwd)
	os.system("rm -rf " + make_dir)
	ifile.close()
	ifile = open("/etc/gci.lst", "r+")
	lines = ifile.readlines()
	for repo in lines:
		if repo.startswith(github_repo + " "):
			lines.remove(repo)
	lines.append(github_repo + " " + usever + "\n")
	ifile.close()
	ifile = open("/etc/gci.lst", "w+")
	ifile.writelines(lines)
	print("GCI: configure, build, and install success.")

def uninstall(repo_url, github_repo_basic, github_repo, usever):
	global ifile
	old_cwd = os.getcwd()
	make_dir = "/tmp/gci-" + github_repo.replace("/", "___SLASH___")
	if os.path.abspath(make_dir) == "/" or os.path.abspath(make_dir) == "/*" or not os.path.abspath(make_dir).startswith("/tmp/gci-"):
		print("GCI: error: github repository " + github_repo + " does not exist.")
		return
	os.mkdir(make_dir)
	os.chdir(make_dir)
	status = os.system("git clone " + repo_url)
	if status != 0:
		os.chdir(old_cwd)
		os.system("rm -rf " + make_dir)
		print("GCI: error: github repository " + github_repo + " does not exist.")
		return
	repo_dir = make_dir + github_repo[github_repo.find("/"):]
	os.chdir(repo_dir)
	if usever != "":
		status = os.system("git checkout " + usever)
		if status != 0:
			os.chdir(old_cwd)
			os.system("rm -rf " + make_dir)
			print("GCI: error: version (tag) " + usever + " does not exist in github repo.")
			return
	status = os.system("make uninstall")
	if status != 0:
		os.chdir(old_cwd)
		os.system("rm -rf " + make_dir)
		print("GCI: error: make uninstall failed, see above.")
		return
	os.chdir(old_cwd)
	os.system("rm -rf " + make_dir)
	ifile.close()
	ifile = open("/etc/gci.lst", "r+")
	lines = ifile.readlines()
	for repo in lines:
		if repo.startswith(github_repo + " "):
			lines.remove(repo)
	ifile.close()
	ifile = open("/etc/gci.lst", "w+")
	ifile.writelines(lines)
	print("GCI: Uninstall success.")

if args.upgrade:
	for line in ifile.readlines():
		print("-- UPDATE " + line[:line.find(" ")] + " --")
		repo_name_ = line[:line.find(" ")]
		os.system("gci -i " + repo_name_)
elif args.install != None:
	github_repo_basic_ = "https://github.com/"
	github_repo_ = ""
	repo_url_ = ""
	usever_ = ""
	if args.version != None:
		usever_ = args.version
	github_repo_ = args.install
	repo_url_ = github_repo_basic_ + github_repo_
	install(repo_url_, github_repo_basic_, github_repo_, usever_)
elif args.remove != None:
	github_repo_basic_ = "https://github.com/"
	github_repo_ = ""
	repo_url_ = ""
	usever_ = ""
	if args.version != None:
		usever_ = args.version
	github_repo_ = args.install
	repo_url_ = github_repo_basic_ + github_repo_
	uninstall(repo_url_, github_repo_basic_, github_repo_, usever_)
else:
	print("GCI: error: no command given [-i INSTALL] [-r REMOVE] [-u] [optional:-v VERSION]")
	exit(-1)

ifile.close()
